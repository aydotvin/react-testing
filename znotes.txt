Jest:
{
	-	This helps in running the test and providing proper messages accordingly.
	-	This provides methods such as test and expect globally to use with RTL methods.

	-	test method:
	{
		-	test.only() to run only that test in a test file with multiple tests.
		-	test.skip() to skip that test in the test file with multiple tests.
		-	"it" can be used as alternate for "test"
		-	"fit" for test.only and "xit" for test.skip
	}

	-	describe method:
	{
		-	This is used to group the tests together.
		-	This supports .only and .skip and behaviour remains same as above.
		-	Possible to nest describe blocks.
	}

	-	Naming conventions:
	{
		-	.test.js, .test.tsx
		-	.spec.js, .spec.tsx
		-	.js, .tsx in __tests__ folder
	}
	
	-	Coverage:
	{
		-	Used to get the stats of the tests runs.
		-	Create a new script that runs test script with --coverage flag and --watchAll flag to watch all the files and not just the changed files.
		-	collectCoverageFrom:
		{
			-	This flag specifies the folders to look for to find the test files.
			-	This can also be used to exclude certain files based on their naming types.
			-	Example:
			{
				-	To specify the folder to consider: --collectCoverageFrom='src/components/**/*.{ts,tsx,js,jsx}' - includes files only from the components folder.
				-	To exclude the files based on their naming conventions: --collectCoverageFrom='!src/components/**/*.{types,stories,constants,test,spec}.{ts,tsx,js,jsx}'
			}
		}

		-	Threshold: this can be defined in the package.json to set the passing coverage limits for jest.

		-	The coverage can also be seen in html format by opening the index.html file that is inside the "coverage" folder that gets generated.
	}

	-	Assertions:
	{
		-	This is done using the expect method of jest.
		-	Jest only provides js matchers. To assert DOM actions, need to use jest-dom package.
	}
}

RTL:
{
	-	This provides methods such as render, screen, etc. which helps in actual testing.

	-	getBy: If elements are present in the DOM.
	{
		-	getByRole: top priority.
		{
			-	Selects the element based on its default/defined role attribute.
			-	options:
			{
				-	name:
				{
					-	Selects the text content of the label element, text content of a button, or value of aria-label attribute. This is case sensitive.
					-	This is used when multiple elements are found for given role.
				}

				-	level:
				{
					-	This is specific to the heading element. 1-6.
				}
			}
		}

		-	getByLabelText:
		{
			-	This searches for the label element with given text and finds its linked input element by checking the for and id matching attributes.
			-	for in label and id in the input element should match.

			-	options:
			{
				-	selector: this takes in the input element tag name and matches that with the element returned by the label name selector.
			}
		}

		-	getByPlaceholderText: searches all elements with placeholder attribute and finds one that matches given text.

		-	getByText: searches all elements that have text node with textContent matching given text. This is used for divs, spans and p tags.

		-	getByDisplayValue: returns input, select or textarea that has matching value.

		-	getByAltText: returns the element that has the given alt text. Only works on elements that accepts alt attribute such as img, input, area, custom html elements.

		-	getByTitle: returns the element that has the matching title attribute.

		-	getByTestId: returns the element that has the matching data-testid attribute. Last resort option. Useful in dynamic text elements.

		-	getAllByRole: returns an array of matching elements.

		-	textMatch:
		{
			-	The first param passed to the above methods is called textMatch.
			-	This could be a string, regex or a function that returns 
		}	
	}

	-	queryBy: If elements are not present in the DOM.
	{
		-	This is useful when a element has to be checked to not be in the document.
		-	These return element if found and null if not found.
	}

	-	findBy:
	{
		-	Returns a promise which resolves when an element is found which matches the query.
		-	Promise is rejected if no element is found or finds more than 1 element after the passed timeout.
	}
}

TDD:
{
	Step 1: Write down the requirement in the test file.
	Step 2: Write the test which fails initially.
	Step 3: Write the software code to pass the test.
	Step 4: Refractor the code while ensuring tests pass.
}

What to test:
{
	-	Test that the component renders and expected initial text is there is the document.
	-	Test that the component renders with the passed props.
	-	Test different states of a component.
	-	Test that the components responds correctly to the user events.
}

What not to test:
{
	-	Implementation details - test the behaviour of the user and not the developer.
	-	3rd party code.
	-	Direct testing of utility functions - test the output of the utility functions linked to the user actions.
}

Note:
{
	-	"Test Suite" is one test file.
}